// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: batch.go

package raw

import (
	"context"
	"errors"

	"github.com/jackc/pgx/v5"
)

var (
	ErrBatchAlreadyClosed = errors.New("batch already closed")
)

const deleteCommunityMembers = `-- name: DeleteCommunityMembers :batchexec
DELETE
FROM community_members
WHERE community_id = $1
  AND username = ANY($2::varchar[])
`

type DeleteCommunityMembersBatchResults struct {
	br     pgx.BatchResults
	tot    int
	closed bool
}

type DeleteCommunityMembersParams struct {
	CommunityID int32
	Column2     []string
}

func (q *Queries) DeleteCommunityMembers(ctx context.Context, arg []DeleteCommunityMembersParams) *DeleteCommunityMembersBatchResults {
	batch := &pgx.Batch{}
	for _, a := range arg {
		vals := []interface{}{
			a.CommunityID,
			a.Column2,
		}
		batch.Queue(deleteCommunityMembers, vals...)
	}
	br := q.db.SendBatch(ctx, batch)
	return &DeleteCommunityMembersBatchResults{br, len(arg), false}
}

func (b *DeleteCommunityMembersBatchResults) Exec(f func(int, error)) {
	defer b.br.Close()
	for t := 0; t < b.tot; t++ {
		if b.closed {
			if f != nil {
				f(t, ErrBatchAlreadyClosed)
			}
			continue
		}
		_, err := b.br.Exec()
		if f != nil {
			f(t, err)
		}
	}
}

func (b *DeleteCommunityMembersBatchResults) Close() error {
	b.closed = true
	return b.br.Close()
}
