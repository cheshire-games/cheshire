// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: copyfrom.go

package raw

import (
	"context"
)

// iteratorForAddCommunityMembers implements pgx.CopyFromSource.
type iteratorForAddCommunityMembers struct {
	rows                 []AddCommunityMembersParams
	skippedFirstNextCall bool
}

func (r *iteratorForAddCommunityMembers) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForAddCommunityMembers) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0].CommunityID,
		r.rows[0].Username,
		r.rows[0].Role,
	}, nil
}

func (r iteratorForAddCommunityMembers) Err() error {
	return nil
}

func (q *Queries) AddCommunityMembers(ctx context.Context, arg []AddCommunityMembersParams) (int64, error) {
	return q.db.CopyFrom(ctx, []string{"community_members"}, []string{"community_id", "username", "role"}, &iteratorForAddCommunityMembers{rows: arg})
}

// iteratorForUploadOriginalPhotos implements pgx.CopyFromSource.
type iteratorForUploadOriginalPhotos struct {
	rows                 []UploadOriginalPhotosParams
	skippedFirstNextCall bool
}

func (r *iteratorForUploadOriginalPhotos) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForUploadOriginalPhotos) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0].Username,
		r.rows[0].Path,
	}, nil
}

func (r iteratorForUploadOriginalPhotos) Err() error {
	return nil
}

func (q *Queries) UploadOriginalPhotos(ctx context.Context, arg []UploadOriginalPhotosParams) (int64, error) {
	return q.db.CopyFrom(ctx, []string{"original_photos"}, []string{"username", "path"}, &iteratorForUploadOriginalPhotos{rows: arg})
}

// iteratorForUploadTransformedPhotos implements pgx.CopyFromSource.
type iteratorForUploadTransformedPhotos struct {
	rows                 []UploadTransformedPhotosParams
	skippedFirstNextCall bool
}

func (r *iteratorForUploadTransformedPhotos) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForUploadTransformedPhotos) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0].PhotoID,
		r.rows[0].OutputType,
		r.rows[0].Path,
	}, nil
}

func (r iteratorForUploadTransformedPhotos) Err() error {
	return nil
}

func (q *Queries) UploadTransformedPhotos(ctx context.Context, arg []UploadTransformedPhotosParams) (int64, error) {
	return q.db.CopyFrom(ctx, []string{"transformed_photos"}, []string{"photo_id", "output_type", "path"}, &iteratorForUploadTransformedPhotos{rows: arg})
}
