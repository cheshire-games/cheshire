// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: communities.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

type AddCommunityMembersParams struct {
	CommunityID int32  `json:"community_id"`
	Username    string `json:"username"`
	Role        string `json:"role"`
}

const createCommunity = `-- name: CreateCommunity :exec
INSERT INTO communities (name, description)
VALUES ($1, $2)
RETURNING community_id, name, created_by, description, created_at, updated_at
`

type CreateCommunityParams struct {
	Name        string      `json:"name"`
	Description pgtype.Text `json:"description"`
}

func (q *Queries) CreateCommunity(ctx context.Context, arg CreateCommunityParams) error {
	_, err := q.db.Exec(ctx, createCommunity, arg.Name, arg.Description)
	return err
}

const deleteCommunity = `-- name: DeleteCommunity :exec
DELETE
FROM communities
WHERE community_id = $1
RETURNING community_id
`

func (q *Queries) DeleteCommunity(ctx context.Context, communityID int32) error {
	_, err := q.db.Exec(ctx, deleteCommunity, communityID)
	return err
}

const getCommunity = `-- name: GetCommunity :one
SELECT community_id, name, description, created_at, updated_at
FROM communities
WHERE community_id = $1
`

type GetCommunityRow struct {
	CommunityID int32            `json:"community_id"`
	Name        string           `json:"name"`
	Description pgtype.Text      `json:"description"`
	CreatedAt   pgtype.Timestamp `json:"created_at"`
	UpdatedAt   pgtype.Timestamp `json:"updated_at"`
}

func (q *Queries) GetCommunity(ctx context.Context, communityID int32) (GetCommunityRow, error) {
	row := q.db.QueryRow(ctx, getCommunity, communityID)
	var i GetCommunityRow
	err := row.Scan(
		&i.CommunityID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getCommunityMembers = `-- name: GetCommunityMembers :many
SELECT c.community_id, c.name as community_name, cm.username, cm.role
FROM communities c
JOIN community_members cm
ON c.community_id = cm.community_id
WHERE c.community_id = $1
ORDER BY cm.role, cm.username
`

type GetCommunityMembersRow struct {
	CommunityID   int32  `json:"community_id"`
	CommunityName string `json:"community_name"`
	Username      string `json:"username"`
	Role          string `json:"role"`
}

func (q *Queries) GetCommunityMembers(ctx context.Context, communityID int32) ([]GetCommunityMembersRow, error) {
	rows, err := q.db.Query(ctx, getCommunityMembers, communityID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetCommunityMembersRow
	for rows.Next() {
		var i GetCommunityMembersRow
		if err := rows.Scan(
			&i.CommunityID,
			&i.CommunityName,
			&i.Username,
			&i.Role,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCommunity = `-- name: UpdateCommunity :exec
UPDATE communities
SET name        = $2,
    description = $3,
    updated_at  = CURRENT_TIMESTAMP
WHERE community_id = $1
RETURNING community_id, name, created_by, description, created_at, updated_at
`

type UpdateCommunityParams struct {
	CommunityID int32       `json:"community_id"`
	Name        string      `json:"name"`
	Description pgtype.Text `json:"description"`
}

func (q *Queries) UpdateCommunity(ctx context.Context, arg UpdateCommunityParams) error {
	_, err := q.db.Exec(ctx, updateCommunity, arg.CommunityID, arg.Name, arg.Description)
	return err
}
