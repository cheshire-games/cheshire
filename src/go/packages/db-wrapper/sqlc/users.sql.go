// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: users.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (username, email, nickname, created_at)
VALUES ($1, $2, $3, $4)
RETURNING username, email, nickname, is_deleted, created_at, updated_at
`

type CreateUserParams struct {
	Username  string           `json:"username"`
	Email     string           `json:"email"`
	Nickname  string           `json:"nickname"`
	CreatedAt pgtype.Timestamp `json:"created_at"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.Username,
		arg.Email,
		arg.Nickname,
		arg.CreatedAt,
	)
	var i User
	err := row.Scan(
		&i.Username,
		&i.Email,
		&i.Nickname,
		&i.IsDeleted,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE
FROM users
WHERE username = $1
RETURNING username
`

func (q *Queries) DeleteUser(ctx context.Context, username string) error {
	_, err := q.db.Exec(ctx, deleteUser, username)
	return err
}

const getUser = `-- name: GetUser :one
SELECT username, nickname, created_at, updated_at
FROM users
WHERE username = $1
LIMIT 1
`

type GetUserRow struct {
	Username  string           `json:"username"`
	Nickname  string           `json:"nickname"`
	CreatedAt pgtype.Timestamp `json:"created_at"`
	UpdatedAt pgtype.Timestamp `json:"updated_at"`
}

func (q *Queries) GetUser(ctx context.Context, username string) (GetUserRow, error) {
	row := q.db.QueryRow(ctx, getUser, username)
	var i GetUserRow
	err := row.Scan(
		&i.Username,
		&i.Nickname,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserCommunities = `-- name: GetUserCommunities :many
SELECT c.community_id, c.name AS community_name, cm.username, cm.role
FROM community_members cm
JOIN communities c
ON c.community_id = cm.community_id
WHERE cm.username = $1
`

type GetUserCommunitiesRow struct {
	CommunityID   int32  `json:"community_id"`
	CommunityName string `json:"community_name"`
	Username      string `json:"username"`
	Role          string `json:"role"`
}

func (q *Queries) GetUserCommunities(ctx context.Context, username string) ([]GetUserCommunitiesRow, error) {
	rows, err := q.db.Query(ctx, getUserCommunities, username)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetUserCommunitiesRow
	for rows.Next() {
		var i GetUserCommunitiesRow
		if err := rows.Scan(
			&i.CommunityID,
			&i.CommunityName,
			&i.Username,
			&i.Role,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
SET nickname   = $2,
    updated_at = CURRENT_TIMESTAMP
WHERE username = $1
RETURNING username, email, nickname, is_deleted, created_at, updated_at
`

type UpdateUserParams struct {
	Username string `json:"username"`
	Nickname string `json:"nickname"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUser, arg.Username, arg.Nickname)
	var i User
	err := row.Scan(
		&i.Username,
		&i.Email,
		&i.Nickname,
		&i.IsDeleted,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
